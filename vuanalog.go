package main

import (
	"bytes"
	"fmt"
	"image"
	"image/draw"
	"image/png"
	"math"
	"os"

	"github.com/disintegration/imaging"

	svg "github.com/ajstarks/svgo"
	"github.com/fogleman/gg"
	"github.com/srwiley/oksvg"
	"github.com/srwiley/rasterx"
)

func (ls *LMSServer) initVUBase() {

	vuf, err := os.Open(ls.vulayout.base)
	if err != nil {
		fmt.Println(`Open exception`, ls.vulayout.base, `:`, err)
		panic(err)
	}
	defer vuf.Close()

	if `vuPeak` != ls.vulayout.mode {

		dc := gg.NewContext(0, 0)

		vu, err := png.Decode(vuf)
		if err != nil {
			fmt.Println(`Decode PNG exception`, ls.vulayout.base, `:`, err)
			panic(err)
		}

		z := vu.Bounds().Max.X
		// horizontal/vertical layout
		if `horizontal` == ls.vulayout.layout {
			vu = imaging.Resize(vu, int(122/2), 40, imaging.Lanczos)
			b := vu.Bounds()
			ls.vulayout.w = b.Max.X
			ls.vulayout.h = b.Max.Y
			ls.vulayout.w2m = 2*(ls.vulayout.w) + 4
			ls.vulayout.h2m = ls.vulayout.h + 2
			// magic numbers are original scaling factors!!!
			// but mainly addressed via config
			if 0.00 == ls.vulayout.setup.width {
				ls.vulayout.ptWidth = 0.015 * float64(ls.vulayout.w)
			} else {
				ls.vulayout.ptWidth = ls.vulayout.setup.width
			}
			ls.vulayout.wMeter = float64(ls.vulayout.h) + (float64(b.Max.X) * (41.00 / float64(z)))
			if 0.00 == ls.vulayout.setup.length {
				ls.vulayout.rMeter = float64(ls.vulayout.h) * (235.00 / float64(z))
			} else {
				ls.vulayout.rMeter = float64(ls.vulayout.h) * ls.vulayout.setup.length
			}
			ls.vulayout.rWell = float64(ls.vulayout.h) / 5.5
		}

		// create new image and place the meters and idents
		chanident := [2]string{`L`, `R`}
		dc = gg.NewContext(ls.vulayout.w2m, ls.vulayout.h2m)
		for channel := 0; channel < 2; channel++ {
			gutter := 1 + channel + (channel * (ls.vulayout.w + 1))
			ls.vulayout.xpivot[channel] = float64(gutter) + (float64(ls.vulayout.w) / 2.00)
			dc.DrawImage(vu, gutter, 1)
			ident, _ := channelIdentScript(chanident[channel], 10, .1, `aqua`)
			if nil != ident {
				dc.DrawImageAnchored(ident,
					1+int(ls.vulayout.xpivot[channel]),
					int(ls.vulayout.h-int(float64(ls.vulayout.h)/4.8)),
					0.5, 0.5)
			}
		}

		// "cache"
		ls.vulayout.baseImage = image.NewRGBA(image.Rect(0, 0, ls.vulayout.w2m, ls.vulayout.h2m))
		draw.Draw(ls.vulayout.baseImage, ls.vulayout.baseImage.Bounds(), dc.Image(), image.ZP, draw.Src)

	} else {

		ls.vulayout.w2m = 122
		ls.vulayout.h2m = 40

		w, h := 162, 40
		var iconMem = new(bytes.Buffer)
		iconMem.ReadFrom(vuf)
		vuf.Close() // done

		iconI, err := oksvg.ReadIconStream(iconMem)
		if err != nil {
			fmt.Println(iconMem.String())
			panic(err)
		}

		ls.vulayout.baseImage = image.NewRGBA(image.Rect(0, 0, ls.vulayout.w2m, ls.vulayout.h2m))
		gv := rasterx.NewScannerGV(w, h, ls.vulayout.baseImage, ls.vulayout.baseImage.Bounds())
		r := rasterx.NewDasher(w, h, gv)
		iconI.SetTarget(0, 0, float64(ls.vulayout.w2m), float64(ls.vulayout.h2m))
		iconI.Draw(r, 1.0)

	}

	ls.vulayout.vu = image.NewRGBA(image.Rect(0, 0, ls.vulayout.w2m, ls.vulayout.h2m))

}

func (ls *LMSServer) vuAnalog(accum [2]int32, scaled [2]int32, dB [2]int32, dBfs [2]int32, linear [2]int32) {

	ls.mux.Lock()
	defer ls.mux.Unlock()

	dc := gg.NewContext(ls.vulayout.w2m, ls.vulayout.h2m)
	dc.DrawImageAnchored(ls.vulayout.baseImage, 0, 0, 0, 0)
	rad := (180.00 / math.Pi)

	for channel := 0; channel < 2; channel++ {

		mv := 0.00
		// depending on the mode - calculate value

		// -90dB is lower limit (equates to RMS of 1)

		// simple pre-scaled - magic numbers are specific!
		mv = float64(scaled[channel]) * (2 * 36.00) / 48.00
		mv -= 36.000 // zero adjust [-3dB->-20dB]
		/*
			fmt.Printf("mv %f, scaled %.2d, dB %.3d, dBfs %.3d, Lin %.3d\n",
				mv, scaled[channel], dB[channel], dBfs[channel], linear[channel])
		*/
		ax := (ls.vulayout.xpivot[channel] + (math.Sin(mv/rad) * ls.vulayout.rMeter))
		ay := (ls.vulayout.wMeter - (math.Cos(mv/rad) * ls.vulayout.rMeter))

		// draw the needle
		dc.SetLineCapButt()
		dc.SetLineWidth(ls.vulayout.ptWidth) //0.8)
		dc.SetHexColor(ls.vulayout.setup.color)
		dc.StrokePreserve()
		dc.DrawLine(ls.vulayout.xpivot[channel], ls.vulayout.wMeter, ax, ay)
		dc.Stroke()

		if ls.vulayout.setup.well {
			// draw the well
			dc.SetLineWidth(1)
			dc.SetHexColor("#d3d3d3")
			dc.StrokePreserve()
			dc.SetHexColor("#000000")
			dc.DrawEllipse(ls.vulayout.xpivot[channel],
				ls.vulayout.wMeter, ls.vulayout.rWell*1.2, ls.vulayout.rWell)
			dc.Fill()
			dc.Stroke()
		}

	}

	draw.Draw(ls.vulayout.vu, ls.vulayout.vu.Bounds(), dc.Image(), image.ZP, draw.Over)

}

func channelIdentScript(channel string, shx, alpha float64, color string) (img draw.Image, err error) {

	w, h := 70, 28
	shx = shx / float64(h)
	sw, sh := int(float64(w)*shx), int(float64(h)*shx)

	img = image.NewRGBA(image.Rect(0, 0, sw, sh))

	var iconMem = new(bytes.Buffer)
	var canvas = svg.New(iconMem)

	canvas.Start(w, h)

	canvas.Group(`style="fill:` + color + `;"`)
	if `R` == channel {
		canvas.Path(`m2.39,4.88l0,-0.7l8.06,-0.25c1.887,0 3.307,0.307 4.26,0.92c0.953,0.613 1.43,1.743 1.43,3.39c0,2.273 -1.167,3.86 -3.5,4.76l3.92,8.29c0.953,0.127 1.85,0.32 2.69,0.58l-0.12,0.7c-1.1,-0.147 -2.29,-0.22 -3.57,-0.22c-1.273,0 -2.2,0.037 -2.78,0.11l-0.11,-0.39c0.313,-0.32 0.47,-0.853 0.47,-1.6c0,-1.493 -0.877,-3.873 -2.63,-7.14c-0.467,-0.093 -1.007,-0.14 -1.62,-0.14l0.08,-0.61l0.34,0c1.34,0 2.373,-0.333 3.1,-1c0.733,-0.66 1.1,-1.623 1.1,-2.89c0,-1.273 -0.287,-2.213 -0.86,-2.82c-0.567,-0.607 -1.457,-0.91 -2.67,-0.91c-0.747,0 -1.457,0.123 -2.13,0.37c-0.167,1.753 -0.25,4.5 -0.25,8.24c0,3.747 0.103,6.32 0.31,7.72c0.947,0.127 1.84,0.32 2.68,0.58l-0.11,0.7c-0.987,-0.147 -2.287,-0.22 -3.9,-0.22c-1.62,0 -3.12,0.073 -4.5,0.22l-0.08,-0.67c1.06,-0.26 2.087,-0.437 3.08,-0.53c0.24,-1.793 0.36,-4.477 0.36,-8.05c0,-3.573 -0.103,-6.237 -0.31,-7.99c-0.893,-0.3 -1.807,-0.45 -2.74,-0.45zm21.67,9.8l0,2.35c0,2.013 0.067,3.507 0.2,4.48c0.52,0.113 1.107,0.29 1.76,0.53l-0.06,0.53c-1.04,-0.147 -2.026,-0.22 -2.96,-0.22c-0.933,0 -1.876,0.057 -2.83,0.17l-0.09,-0.53c0.56,-0.247 1.114,-0.433 1.66,-0.56c0.167,-1.273 0.25,-2.74 0.25,-4.4l0,-2.35c0,-1.513 -0.076,-3.027 -0.23,-4.54c-0.48,-0.147 -0.983,-0.22 -1.51,-0.22l0,-0.59c1.44,-0.093 2.767,-0.28 3.98,-0.56l0.19,0.11c-0.24,1.44 -0.36,3.373 -0.36,5.8zm0.5,-9.69c-0.126,0.24 -0.353,0.547 -0.68,0.92c-0.326,0.373 -0.603,0.637 -0.83,0.79c-0.22,-0.153 -0.493,-0.417 -0.82,-0.79c-0.326,-0.373 -0.556,-0.68 -0.69,-0.92c0.114,-0.227 0.327,-0.483 0.64,-0.77c0.32,-0.287 0.61,-0.497 0.87,-0.63c0.247,0.147 0.527,0.367 0.84,0.66c0.32,0.287 0.544,0.533 0.67,0.74zm3.696,12.18c0,-1.907 0.506,-3.637 1.52,-5.19c1.006,-1.56 2.376,-2.63 4.11,-3.21c1.253,0 2.56,0.197 3.92,0.59c0.82,-0.167 1.54,-0.343 2.16,-0.53l0.14,0.5c-0.354,0.28 -0.794,0.55 -1.32,0.81c-0.24,2.26 -0.36,4.663 -0.36,7.21c0,2.547 0.063,4.53 0.19,5.95c-0.407,1.027 -1.18,2.04 -2.32,3.04c-1.14,1 -2.27,1.677 -3.39,2.03c-1.734,0 -3.394,-0.29 -4.98,-0.87l0,-0.53c0.353,-1.253 1.396,-2.813 3.13,-4.68l0,-0.11c-0.854,-0.24 -1.534,-0.87 -2.04,-1.89c-0.507,-1.013 -0.76,-2.053 -0.76,-3.12zm2.24,-1.23c0,0.873 0.163,1.777 0.49,2.71c0.326,0.933 0.793,1.4 1.4,1.4c0.606,0 1.363,-0.49 2.27,-1.47c0.906,-0.98 1.51,-1.833 1.81,-2.56c0,-2.447 -0.067,-4.06 -0.2,-4.84c-0.987,-0.447 -1.93,-0.67 -2.83,-0.67c-0.894,0 -1.594,0.223 -2.1,0.67c-0.56,1.36 -0.84,2.947 -0.84,4.76zm3.08,10.69c0.826,0 1.473,-0.223 1.94,-0.67c0.426,-1.12 0.69,-2.203 0.79,-3.25c0.106,-1.04 0.16,-2.747 0.16,-5.12l-0.11,-0.03c-0.507,1.067 -1.424,2.177 -2.75,3.33c-0.52,0.453 -1.024,0.92 -1.51,1.4c-1.174,1.18 -1.827,2.367 -1.96,3.56c1.026,0.52 2.173,0.78 3.44,0.78zm18.063,-12.43c0,-2.087 -0.43,-3.13 -1.29,-3.13c-0.727,0 -1.584,0.457 -2.57,1.37c-0.994,0.913 -1.657,1.763 -1.99,2.55c0,2.707 0.103,4.88 0.31,6.52c0.5,0.113 1.086,0.29 1.76,0.53l-0.06,0.53c-1.04,-0.147 -2.027,-0.22 -2.96,-0.22c-0.934,0 -1.877,0.057 -2.83,0.17l-0.09,-0.53c0.56,-0.247 1.113,-0.433 1.66,-0.56c0.166,-1.273 0.25,-2.74 0.25,-4.4l0,-5.21c0,-4.907 -0.224,-8.247 -0.67,-10.02l0.58,-0.17c0.173,0.6 0.39,1.093 0.65,1.48c1.026,-0.167 2.023,-0.39 2.99,-0.67l0.14,0.51c-0.354,0.28 -0.79,0.55 -1.31,0.81c-0.28,1.527 -0.42,4.69 -0.42,9.49l0.11,0.03c0.633,-0.88 1.46,-1.78 2.48,-2.7c1.013,-0.927 1.933,-1.53 2.76,-1.81c1.133,0 1.87,0.513 2.21,1.54c0.22,0.727 0.33,1.623 0.33,2.69c0,0.167 0,0.353 0,0.56l-0.14,7.87c0.453,0.147 0.96,0.22 1.52,0.22l0,0.59c-1.2,0.053 -2.46,0.23 -3.78,0.53l-0.2,-0.11c0.3,-1.813 0.476,-4.427 0.53,-7.84c0.02,-0.187 0.03,-0.393 0.03,-0.62zm9.154,2.69c0,2.573 0.28,3.86 0.84,3.86c1.027,0 2.09,-0.493 3.19,-1.48l0.28,0.28c-1.08,1.513 -2.396,2.587 -3.95,3.22c-1.06,0 -1.74,-0.487 -2.04,-1.46c-0.26,-0.82 -0.39,-2.237 -0.39,-4.25c0,-0.353 0,-0.737 0,-1.15l0.11,-5.57l-1.51,0l-0.06,-0.06c0,-0.3 0.03,-0.503 0.09,-0.61c1.567,-1.027 2.594,-2.093 3.08,-3.2c0.22,-0.053 0.48,-0.08 0.78,-0.08l0.11,0.06c-0.186,1.12 -0.296,2.023 -0.33,2.71l3.92,-0.14l0.11,0.11c-0.133,0.34 -0.256,0.78 -0.37,1.32c-0.946,-0.053 -2.196,-0.08 -3.75,-0.08l-0.11,5.54c0,0.333 0,0.66 0,0.98z`)
	} else {
		canvas.Path(`m25.269,21.905l-0.17,0.56c-1.867,-0.207 -4,-0.31 -6.4,-0.31c-2.4,0 -4.43,0.093 -6.09,0.28l-0.11,-0.7c0.727,-0.24 1.623,-0.453 2.69,-0.64c0.2,-1.533 0.3,-3.943 0.3,-7.23l0,-1.65c0,-3.267 -0.1,-5.673 -0.3,-7.22c-0.953,-0.133 -1.85,-0.33 -2.69,-0.59l0.11,-0.7c0.987,0.147 2.29,0.22 3.91,0.22c1.613,0 3.11,-0.073 4.49,-0.22l0.08,0.67c-1.12,0.26 -2.147,0.437 -3.08,0.53c-0.24,1.647 -0.36,4.39 -0.36,8.23c0,3.847 0.093,6.46 0.28,7.84c0.613,0.093 1.443,0.14 2.49,0.14c1.047,0 1.943,-0.167 2.69,-0.5c0.227,-0.693 0.403,-1.74 0.53,-3.14l0.7,0c0.073,1.98 0.383,3.457 0.93,4.43zm6.067,-1.35c1.18,0 2.33,-0.493 3.45,-1.48l0.31,0.28c-1.067,1.453 -2.43,2.527 -4.09,3.22c-1.647,0 -2.88,-0.513 -3.7,-1.54c-0.82,-1.027 -1.23,-2.453 -1.23,-4.28c0,-1.833 0.513,-3.537 1.54,-5.11c1.027,-1.58 2.4,-2.603 4.12,-3.07c1.247,0 2.123,0.247 2.63,0.74c0.5,0.493 0.75,1.367 0.75,2.62c0,0.707 -0.093,1.313 -0.28,1.82c0.393,0.147 0.853,0.22 1.38,0.22l-0.03,0.59c-0.113,0 -0.237,0 -0.37,0c-2.087,0 -4.587,0.31 -7.5,0.93c0,2.48 0.487,4.027 1.46,4.64c0.407,0.28 0.927,0.42 1.56,0.42zm1.54,-6.94c0,-1.233 -0.117,-2.093 -0.35,-2.58c-0.233,-0.48 -0.723,-0.72 -1.47,-0.72c-0.747,0 -1.39,0.223 -1.93,0.67c-0.5,1.047 -0.77,2.307 -0.81,3.78c1.533,-0.507 3.053,-0.89 4.56,-1.15zm8.687,-3.44l0,5.54c0,2.5 0.11,5.207 0.33,8.12c-0.26,-0.04 -0.47,-0.06 -0.63,-0.06c-0.16,0 -0.277,0 -0.35,0c-0.56,1.027 -0.98,2.353 -1.26,3.98l-0.5,-0.03c0.22,-4.033 0.33,-8.037 0.33,-12.01l0,-5.57l-1.51,0l-0.05,-0.06c0,-0.3 0.027,-0.503 0.08,-0.61c0.24,-0.093 0.733,-0.253 1.48,-0.48c0.187,-1.453 0.787,-2.807 1.8,-4.06c1.007,-1.253 2.2,-2.15 3.58,-2.69c0.82,0 1.66,0.15 2.52,0.45l0,0.39c-0.707,0.88 -1.107,1.953 -1.2,3.22l-0.62,0c0,-0.727 -0.02,-1.297 -0.06,-1.71c-0.353,-0.22 -0.88,-0.33 -1.58,-0.33c-0.7,0 -1.283,0.223 -1.75,0.67c-0.393,1.047 -0.59,2.39 -0.59,4.03l3.98,-0.14l0.11,0.11c-0.127,0.34 -0.247,0.78 -0.36,1.32c-0.953,-0.053 -2.203,-0.08 -3.75,-0.08zm8.731,6.52c0,2.573 0.28,3.86 0.84,3.86c1.027,0 2.09,-0.493 3.19,-1.48l0.28,0.28c-1.08,1.513 -2.397,2.587 -3.95,3.22c-1.06,0 -1.74,-0.487 -2.04,-1.46c-0.26,-0.82 -0.39,-2.237 -0.39,-4.25c0,-0.353 0,-0.737 0,-1.15l0.11,-5.57l-1.51,0l-0.06,-0.06c0,-0.3 0.03,-0.503 0.09,-0.61c1.567,-1.027 2.593,-2.093 3.08,-3.2c0.22,-0.053 0.48,-0.08 0.78,-0.08l0.11,0.06c-0.187,1.12 -0.297,2.023 -0.33,2.71l3.92,-0.14l0.11,0.11c-0.133,0.34 -0.257,0.78 -0.37,1.32c-0.947,-0.053 -2.197,-0.08 -3.75,-0.08l-0.11,5.54c0,0.333 0,0.66 0,0.98z`)
	}

	canvas.Gend()
	canvas.End()

	//fmt.Println(iconMem.String())

	iconI, err := oksvg.ReadIconStream(iconMem)
	if err != nil {
		return img, err
	}

	gv := rasterx.NewScannerGV(w, h, img, img.Bounds())
	r := rasterx.NewDasher(w, h, gv)
	iconI.SetTarget(0, 0, float64(sw), float64(sh))
	iconI.Draw(r, alpha)

	return img, nil

}
func channelIdent(channel string, sw, sh int) (img draw.Image, err error) {

	img = image.NewRGBA(image.Rect(0, 0, sw, sh))

	var iconMem = new(bytes.Buffer)
	var canvas = svg.New(iconMem)

	w, h := 20, 20
	canvas.Start(w, h)

	canvas.Group(`style="fill:white;stroke-width:0.1;stroke:white;"`)
	canvas.Circle(10, 10, 9, `style="fill:orangered;stroke:lime;stroke-alignment:inside;stroke-width:0.2;"`)
	if `R` == channel {
		canvas.Path(`m14.03195,14.51759l0,-0.3165c-0.48163,-0.33026 -0.59172,-0.68805 -0.60548,-2.02286c-0.02752,-1.65131 -0.27522,-2.1467 -1.36233,-2.61458c1.1284,-0.55044 1.58251,-1.25224 1.58251,-2.3944c0,-1.73388 -1.08711,-2.68338 -3.05493,-2.68338l-4.62367,0l0,10.03171l1.27977,0l0,-4.32093l3.30262,0c1.1284,0 1.66507,0.55044 1.65131,1.78892l-0.01376,0.89446c-0.01376,0.61924 0.11009,1.22472 0.28898,1.63755l1.55498,0zm-1.72012,-7.16944c0,1.18343 -0.60548,1.72011 -1.96781,1.72011l-3.09621,0l0,-3.45399l3.09621,0c1.43114,0 1.96781,0.60548 1.96781,1.73388z`)
	} else {
		canvas.Path(`m13.99,14.52771l0,-1.10818l-4.86517,0l0,-8.74379l-1.25683,0l0,9.85196l6.122,0z`)
	}

	canvas.Gend()
	canvas.End()

	//fmt.Println(iconMem.String())

	iconI, err := oksvg.ReadIconStream(iconMem)
	if err != nil {
		return img, err
	}

	gv := rasterx.NewScannerGV(w, h, img, img.Bounds())
	r := rasterx.NewDasher(w, h, gv)
	iconI.SetTarget(0, 0, float64(sw), float64(sh))
	iconI.Draw(r, .4)

	return img, nil

}

func (ls *LMSServer) vuAnalogNotUsed(channel string, swing, sw, sh int) (img draw.Image, err error) {

	img = image.NewRGBA(image.Rect(0, 0, sw, sh))

	var iconMem = new(bytes.Buffer)
	var canvas = svg.New(iconMem)

	w, h := 449, 264
	canvas.Start(w, h)

	iconMem.WriteString(`<defs>
	<filter id="blur" filterUnits="objectBoundingBox" x="-50%" y="-50%" width="200%" height="200%">
	<feGaussianBlur in="SourceGraphic" stdDeviation="8"/></filter>
	</defs>
	`)

	canvas.Rect(1, 1, w-2, 263, `style="fill:#ffeea9;stroke-width:4;filter:url(#blur);stroke:red;"`)

	canvas.Group(`style="fill:blue;stroke:black;stroke-width;1px;"`)
	if `R` == channel {
		canvas.Path(`m174.77143,50.000004l0,-0.552c-0.84,-0.576 -1.032,-1.2 -1.056,-3.528c-0.048,-2.88 -0.48,-3.744 -2.376,-4.56c1.968,-0.96 2.76,-2.184 2.76,-4.175997c0,-3.024 -1.896,-4.68 -5.328,-4.68l-8.064,0l0,17.495997l2.232,0l0,-7.536l5.76,0c1.968,0 2.904,0.96 2.88,3.12l-0.024,1.56c-0.024,1.08 0.192,2.136 0.504,2.856l2.712,0zm-3,-12.503997c0,2.063997 -1.056,2.999997 -3.432,2.999997l-5.4,0l0,-6.023997l5.4,0c2.496,0 3.432,1.056 3.432,3.024z`)
	} else {
		canvas.Path(`m173.25964,50.000004l0,-1.968l-8.64,0l0,-15.528l-2.232,0l0,17.496l10.872,0z`)
	}
	canvas.Path(`m187.29926,49.999999l0,-1.728l-5.712,0l0,1.728l5.712,0z`)
	canvas.Path(`m207.94714,50.000004l0,-1.968l-8.64,0l0,-15.528l-2.232,0l0,17.496l10.872,0z`)
	canvas.Path(`m220.82651,43.928004c0,-1.824 -0.144,-2.976 -0.504,-3.912c-0.816,-2.064 -2.736,-3.312 -5.088,-3.312c-3.504,0 -5.76,2.592 -5.76,6.72c0,4.128 2.184,6.576 5.712,6.576c2.88,0 4.872,-1.632 5.376,-4.176l-2.016,0c-0.552,1.656 -1.68,2.328 -3.288,2.328c-2.088,0 -3.648,-1.344 -3.696,-4.224l9.264,0zm-2.136,-1.776c0,0 0,0.096 -0.024,0.144l-7.056,0c0.168,-2.232 1.584,-3.744 3.6,-3.744c1.968,0 3.48,1.632 3.48,3.6z`)
	canvas.Path(`m233.16289,37.424004l-2.256,0l-3.552,10.2l-3.36,-10.2l-2.256,0l4.416,12.576l2.184,0l4.824,-12.576z`)
	canvas.Path(`m245.34214,43.928004c0,-1.824 -0.144,-2.976 -0.504,-3.912c-0.816,-2.064 -2.736,-3.312 -5.088,-3.312c-3.504,0 -5.76,2.592 -5.76,6.72c0,4.128 2.184,6.576 5.712,6.576c2.88,0 4.872,-1.632 5.376,-4.176l-2.016,0c-0.552,1.656 -1.68,2.328 -3.288,2.328c-2.088,0 -3.648,-1.344 -3.696,-4.224l9.264,0zm-2.136,-1.776c0,0 0,0.096 -0.024,0.144l-7.056,0c0.168,-2.232 1.584,-3.744 3.6,-3.744c1.968,0 3.48,1.632 3.48,3.6z`)
	canvas.Path(`m250.01351,50.000004l0,-17.496l-1.992,0l0,17.496l1.992,0z`)
	canvas.Path(`m270.26951,49.640004l0,-17.496l-1.992,0l0,6.504c-0.84,-1.272 -2.184,-1.944 -3.864,-1.944c-3.264,0 -5.4,2.52 -5.4,6.528c0,4.248 2.088,6.768 5.472,6.768c1.728,0 2.928,-0.648 4.008,-2.208l0,1.848l1.776,0zm-1.992,-6.24c0,2.904 -1.392,4.728 -3.504,4.728c-2.208,0 -3.672,-1.848 -3.672,-4.776c0,-2.928 1.464,-4.776 3.648,-4.776c2.16,0 3.528,1.92 3.528,4.824z`)
	canvas.Path(`m286.70089,45.008004c0,-2.112 -0.96,-3.384 -3.192,-4.248c1.584,-0.744 2.424,-2.04 2.424,-3.816c0,-2.544 -1.872,-4.44 -5.184,-4.44l-7.104,0l0,17.496l7.896,0c3.144,0 5.16,-2.112 5.16,-4.992zm-3,-7.752c0,1.776 -1.032,2.784 -3.504,2.784l-4.32,0l0,-5.568l4.32,0c2.472,0 3.504,1.008 3.504,2.784zm0.768,7.776c0,1.68 -1.032,3 -3.144,3l-5.448,0l0,-6.024l5.448,0c2.112,0 3.144,1.32 3.144,3.024z`)
	canvas.Gend()

	styleGauge := `style="fill:none;stroke-width:%d;stroke:%s"`
	canvas.Group()
	canvas.Path(`m34.683176,122.225456l18.886663,0z`, `style="fill:none;fill-rule:evenodd;stroke-width:3;stroke-miterlimit:4;stroke:black"`)
	canvas.Path(`m395.819023,119.65l18.886663,0z`, `style="fill:none;fill-rule:evenodd;stroke-width:3;stroke-miterlimit:4;stroke:red"`)
	canvas.Path(`m405.262355,110.206668l0,18.886663z`, `style="fill:none;fill-rule:evenodd;stroke-width:3;stroke-miterlimit:4;stroke:red"`)
	canvas.Path(`m274.382277,116.074644c35.687565,3.698986 72.207712,10.544722 123.384266,31.669129`, fmt.Sprintf(styleGauge, 6, `red`))
	canvas.Path(`m53.032146,149.644157c67.321881,-25.071967 131.318469,-40.893083 221.45554,-33.95048`, fmt.Sprintf(styleGauge, 6, `black`))
	canvas.Path(`m88.34358,113.596814l14.327995,19.915915z`, fmt.Sprintf(styleGauge, 3, `black`))
	canvas.Path(`m119.578611,104.570179l11.462394,21.778552z`, fmt.Sprintf(styleGauge, 3, `black`))
	canvas.Path(`m152.962839,97.836023l7.737116,22.065111z`, fmt.Sprintf(styleGauge, 3, `black`))
	canvas.Path(`m188.782827,92.677944l3.725278,22.494952z`, fmt.Sprintf(styleGauge, 3, `black`))
	canvas.Path(`m227.325133,91.101862l-0.286559,22.494952z`, fmt.Sprintf(styleGauge, 3, `black`))
	canvas.Path(`m259.27656,92.248103l-3.581997,22.208393z`, fmt.Sprintf(styleGauge, 3, `black`))
	canvas.Path(`m279.479034,95.113704l-6.017761,23.497911z`, fmt.Sprintf(styleGauge, 3, `red`))
	canvas.Path(`m324.755497,102.13442l-10.172876,20.345751z`, fmt.Sprintf(styleGauge, 3, `red`))
	canvas.Path(`m360.862044,133.369447l14.327995,-18.196551z`, fmt.Sprintf(styleGauge, 3, `red`))
	canvas.Gend()

	canvas.Group(`style="stroke-width:1px;fill:red;"`)
	canvas.Path(`m379.007808,91.810767l8.070565,0l0,1.730169l-6.187989,0l0,3.724966q0.4478,-0.152661 0.895599,-0.223904q0.4478,-0.081423 0.895599,-0.081423q2.544354,0 4.03028,1.394298t1.485884,3.775824q0,2.452768 -1.526612,3.816552q-1.526612,1.353612 -4.304996,1.353612q-0.95667,0 -1.954069,-0.162837q-0.987227,-0.162841 -2.045655,-0.488528l0,-2.065998q0.915984,0.498699 1.892998,0.742942q0.977055,0.24426 2.06604,0.24426q1.760684,0 2.788597,-0.926156t1.027913,-2.513839q0,-1.587683 -1.027913,-2.513839q-1.027913,-0.926156 -2.788597,-0.926156q-0.824356,0 -1.648755,0.183193q-0.814185,0.183193 -1.669098,0.569942l0.000208,-7.633078l0.000001,0z`)
	canvas.Path(`m332.256061,83.585961q1.475713,0.315502 2.300111,1.312884q0.83457,0.997398 0.83457,2.46294q0,2.249211 -1.546955,3.480681q-1.546955,1.23147 -4.396707,1.23147q-0.95667,0 -1.974412,-0.193373q-1.00757,-0.183193 -2.086383,-0.55977l0,-1.984583q0.854913,0.498699 1.872654,0.753114q1.017742,0.254435 2.127069,0.254435q1.933726,0 2.941296,-0.763327q1.017742,-0.763285 1.017742,-2.218697q0,-1.343441 -0.946499,-2.096554q-0.936327,-0.763285 -2.615597,-0.763285l-1.770855,0l0,-1.689441l1.852311,0q1.516441,0 2.320454,-0.600457q0.804013,-0.610628 0.804013,-1.750512q0,-1.170399 -0.83457,-1.79124q-0.824356,-0.631013 -2.371354,-0.631013q-0.844741,0 -1.811583,0.183193t-2.127069,0.569942l0,-1.831926q1.170399,-0.325678 2.18814,-0.488528q1.027913,-0.162837 1.933726,-0.162837q2.340797,0 3.704581,1.068641q1.363784,1.05847 1.363784,2.870053q0,1.261985 -0.722599,2.137282q-0.722599,0.865084 -2.055826,1.200955l-0.000042,-0.000046l0,-0.000001z`)
	canvas.Path(`m283.565879,71.267512q-1.587683,0 -2.391697,1.56734q-0.793842,1.557169 -0.793842,4.691849q0,3.124467 0.793842,4.691849q0.804013,1.557169 2.391697,1.557169q1.597855,0 2.391697,-1.557169q0.804013,-1.56734 0.804013,-4.691849q0,-3.134639 -0.804013,-4.691849q-0.793842,-1.56734 -2.391697,-1.56734zm0,-1.62837q2.554525,0 3.897966,2.025311q1.353612,2.01514 1.353612,5.861998q0,3.836895 -1.353612,5.861998q-1.343441,2.01514 -3.897966,2.01514t-3.908138,-2.01514q-1.343399,-2.025311 -1.343399,-5.861998q0,-3.847066 1.343399,-5.861998q1.353612,-2.025311 3.908138,-2.025311z`)
	canvas.Gend()

	canvas.Group(`style="stroke-width:1px;fill:black;"`)
	canvas.Path(`m194.738936,140.375889l7.78328,0l7.964517,23.076028l7.944437,-23.076028l7.78328,0l-11.122209,31.263362l-9.231609,0l-11.121696,-31.263362z`)
	canvas.Path(`m230.177398,140.375889l7.743123,0l0,18.741397q0,3.873933 1.206749,5.549355q1.22683,1.654245 3.982207,1.654245q2.775457,0 3.982207,-1.654245q1.22683,-1.675205 1.22683,-5.549355l0,-18.741397l7.743123,0l0,18.741397q0,6.638102 -3.197803,9.883982q-3.197803,3.245718 -9.754203,3.245718q-6.536269,0 -9.734122,-3.245718q-3.197803,-3.245718 -3.197803,-9.883982l-0.000308,-18.741397z`)
	canvas.Path(`m258.58298,80.680391l3.358539,0l0,-11.592265l-3.653681,0.732771l0,-1.872654l3.633338,-0.732771l2.055826,0l0,13.464836l3.358539,0l0,1.730169l-8.752561,0l0,-1.730086z`)
	canvas.Path(`m230.123401,73.581129q1.475713,0.315502 2.300111,1.312884q0.83457,0.997398 0.83457,2.46294q0,2.249211 -1.546955,3.480681q-1.546955,1.23147 -4.396707,1.23147q-0.95667,0 -1.974412,-0.193373q-1.00757,-0.183193 -2.086383,-0.55977l0,-1.984583q0.854913,0.498699 1.872654,0.753114q1.017742,0.254435 2.127069,0.254435q1.933726,0 2.941296,-0.763327q1.017742,-0.763285 1.017742,-2.218697q0,-1.343441 -0.946499,-2.096554q-0.936327,-0.763285 -2.615597,-0.763285l-1.770855,0l0,-1.689441l1.852311,0q1.516441,0 2.320454,-0.600457q0.804013,-0.610628 0.804013,-1.750512q0,-1.170399 -0.83457,-1.79124q-0.824356,-0.631013 -2.371354,-0.631013q-0.844741,0 -1.811583,0.183193t-2.127069,0.569942l0,-1.831926q1.170399,-0.325678 2.18814,-0.488528q1.027913,-0.162837 1.933726,-0.162837q2.340797,0 3.704581,1.068641q1.363784,1.05847 1.363784,2.870053q0,1.261985 -0.722599,2.137282q-0.722599,0.865084 -2.055826,1.200955l-0.000042,-0.000046l0,-0.000001z`)
	canvas.Path(`m185.997923,69.716763l8.070565,0l0,1.730169l-6.187989,0l0,3.724966q0.4478,-0.152661 0.895599,-0.223904q0.4478,-0.081423 0.895599,-0.081423q2.544354,0 4.03028,1.394298t1.485884,3.775824q0,2.452768 -1.526612,3.816552q-1.526612,1.353612 -4.304996,1.353612q-0.95667,0 -1.954069,-0.162837q-0.987227,-0.162841 -2.045655,-0.488528l0,-2.065998q0.915984,0.498699 1.892998,0.742942q0.977055,0.24426 2.06604,0.24426q1.760684,0 2.788597,-0.926156t1.027913,-2.513839q0,-1.587683 -1.027913,-2.513839q-1.027913,-0.926156 -2.788597,-0.926156q-0.824356,0 -1.648755,0.183193q-0.814185,0.183193 -1.669098,0.569942l0.000208,-7.633078l0.000001,0z`)
	canvas.Path(`m147.60438,73.051707l9.770552,0l0,0.875256l-5.515997,14.319833l-2.147454,0l5.190423,-13.464836l-7.297274,0l-0.00025,-1.730252l0,-0.000001z`)
	canvas.Path(`m108.093631,91.302188l3.358539,0l0,-11.592265l-3.653681,0.732771l0,-1.872654l3.633338,-0.732771l2.055826,0l0,13.464836l3.358539,0l0,1.730169l-8.752561,0l0,-1.730086z`)
	canvas.Path(`m125.401991,79.188004q-1.587683,0 -2.391697,1.56734q-0.793842,1.557169 -0.793842,4.691849q0,3.124467 0.793842,4.691849q0.804013,1.557169 2.391697,1.557169q1.597855,0 2.391697,-1.557169q0.804013,-1.56734 0.804013,-4.691849q0,-3.134639 -0.804013,-4.691849q-0.793842,-1.56734 -2.391697,-1.56734zm0,-1.62837q2.554525,0 3.897966,2.025311q1.353612,2.01514 1.353612,5.861998q0,3.836895 -1.353612,5.861998q-1.343441,2.01514 -3.897966,2.01514t-3.908138,-2.01514q-1.343399,-2.025311 -1.343399,-5.861998q0,-3.847066 1.343399,-5.861998q1.353612,-2.025311 3.908138,-2.025311z`)
	canvas.Path(`m71.375898,100.473284l7.175132,0l0,1.730169l-9.64841,0l0,-1.730169q1.170399,-1.211127 3.185539,-3.24661q2.025311,-2.045655 2.544354,-2.63594q0.987227,-1.109327 1.373955,-1.872654q0.396921,-0.773499 0.396921,-1.516441q0,-1.211127 -0.854913,-1.974412q-0.844741,-0.763285 -2.208483,-0.763285q-0.966842,0 -2.045655,0.335854q-1.068641,0.335854 -2.289939,1.017742l0,-2.076211q1.241641,-0.498699 2.320454,-0.753114t1.974412,-0.254435q2.361182,0 3.765652,1.18057q1.404512,1.18057 1.404512,3.155024q0,0.936327 -0.356214,1.781069q-0.34603,0.83457 -1.272198,1.974412q-0.25444,0.295143 -1.618198,1.709826q-1.363784,1.40447 -3.847066,3.938652l0.000146,-0.000046l-0.000001,-0.000001z`)
	canvas.Path(`m87.275243,88.3591q-1.587683,0 -2.391697,1.56734q-0.793842,1.557169 -0.793842,4.691849q0,3.124467 0.793842,4.691849q0.804013,1.557169 2.391697,1.557169q1.597855,0 2.391697,-1.557169q0.804013,-1.56734 0.804013,-4.691849q0,-3.134639 -0.804013,-4.691849q-0.793842,-1.56734 -2.391697,-1.56734zm0,-1.62837q2.554525,0 3.897966,2.025311q1.353612,2.01514 1.353612,5.861998q0,3.836895 -1.353612,5.861998q-1.343441,2.01514 -3.897966,2.01514t-3.908138,-2.01514q-1.343441,-2.025311 -1.343441,-5.861998q0,-3.847066 1.343441,-5.861998q1.353612,-2.025311 3.908138,-2.025311z`)
	canvas.Gend()

	transform := ``
	if swing > 0 {
		transform = fmt.Sprintf("transform=\"rotate(%f 224.63693237304682,305.0175170898438)\"", float64(swing)*80.00/48.00)
	}
	iconMem.WriteString(`<line id="needle" style="fill-rule:evenodd;stroke-width:4;stroke-miterlimit:4;stroke:darkslategrey;" ` +
		transform + ` y2="122.104244" x2="77.22333" y1="305.017519" x1="224.636926"/>
		`)
	canvas.Path(`m224.433461,246.549826a62.849338,62.849338 0 0 0 -44.733522,18.780229l89.517522,0a62.849338,62.849338 0 0 0 -44.784,-18.780229z`, `style="fill:black;stroke-width:1.5;stroke-miterlimit:4;stroke-dashoffset:0;stroke:gray;"`)
	iconMem.WriteString(`<ellipse ry="1.476388" rx="1.578204" cy="305.017519" cx="224.636926" style="fill:black;stroke-width:0.61062;stroke-miterlimit:4;stroke-dashoffset:0;stroke:blue;"/>`)

	canvas.End()

	fmt.Println(iconMem.String())
	iconI, err := oksvg.ReadIconStream(iconMem)
	if err != nil {
		return img, err
	}

	gv := rasterx.NewScannerGV(w, h, img, img.Bounds())
	r := rasterx.NewDasher(w, h, gv)
	iconI.SetTarget(0, 0, float64(sw), float64(sh))
	iconI.Draw(r, 1.0)

	return img, nil

}
