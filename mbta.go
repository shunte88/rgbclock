package main

import (
	"bytes"
	"fmt"
	"image"
	"image/draw"
	"strings"
	"sync"
	"time"

	svg "github.com/ajstarks/svgo"
	"github.com/disintegration/imaging"
	"github.com/mellena1/mbta-v3-go/mbta"
	"github.com/srwiley/oksvg"
	"github.com/srwiley/rasterx"
	"golang.org/x/image/font"
	"golang.org/x/image/font/basicfont"
	"golang.org/x/image/math/fixed"
)

// RGBPrediction holds realtime schedule information
type RGBPrediction struct {
	routeType     string
	stopName      string
	arrivalTime   time.Time
	departureTime time.Time
	direction     string
	routeID       string
	stopID        string
	color         string
	countdown     string
	stack         int
	changed       int // -1 invalid, 0 new, 1 update
	icon          iconCache
	slice         *image.RGBA
	canvas        *image.RGBA
}

// MBTA models transit predicted schedule
type MBTA struct {
	Display    bool
	mc         *mbta.Client
	days       []int
	active     bool
	update     chan bool
	mux        sync.Mutex
	offset     time.Duration
	route      []string
	stop       []string
	from       time.Time
	until      time.Time
	face       font.Face
	fontHeight float64
	prediction []RGBPrediction
}

// NewMBTAClient initiate an MBTA client
func NewMBTAClient(api, route, stop string, from, until time.Time, days []int, offset time.Duration) *MBTA {
	return &MBTA{
		mc:         mbta.NewClient(mbta.ClientConfig{APIKey: api}),
		active:     false,
		days:       days,
		offset:     offset,
		from:       from,
		until:      until,
		route:      cleanSplit(route),
		stop:       cleanSplit(stop),
		face:       basicfont.Face7x13,
		fontHeight: 13,
		Display:    false,
	}
}

func cleanSplit(s string) []string {
	ret := strings.Split(s, ",")
	for i := range ret {
		ret[i] = strings.TrimSpace(ret[i])
	}
	return ret
}

// Start updates
func (m *MBTA) Start() {
	if !m.active {
		m.update = sched(m.getPredicted, 30*time.Second)
		m.active = true
	}
}

// SetActiveHours implements predictions window
func (m *MBTA) SetActiveHours(from, until time.Time, days []int) {
	if m.from != from {
		m.from = from
	}
	if m.until != until {
		m.until = until
	}
	m.days = days

}

// Stop updates
func (m *MBTA) Stop() {
	if m.active {
		m.update <- true
		m.active = false
	}
}

func (m *MBTA) indexOf(pp RGBPrediction) int {
	for i, this := range m.prediction {
		if this.routeType == pp.routeType && this.stopName == pp.stopName && this.direction == pp.direction {
			return i
		}
	}
	return -1
}

func (m *MBTA) getPredicted() {

	day := int(time.Now().Weekday())
	check, _ := parseTime(time.Now().Format("03:04 PM"))
	if check.After(m.from) && check.Before(m.until) && intInSlice(m.days, day) {
		m.Display = true
	} else {
		m.Display = false
		return
	}

	pred, _, err := m.mc.Predictions.GetAllPredictions(
		&mbta.GetAllPredictionsRequestConfig{
			Sort:           mbta.PredictionsSortByArrivalTimeAscending,
			Include:        []mbta.PredictionInclude{"stop", "route"},
			FilterRouteIDs: m.route,
			FilterStopIDs:  m.stop,
		})

	if nil == err {

		// reset
		for i := range m.prediction {
			m.prediction[i].changed = -1
			m.prediction[i].countdown = ``
			m.prediction[i].stack = 0
		}
		testOff := time.Now().Add(m.offset)

		for _, p := range pred {

			if p.ScheduleRelationship != string(mbta.ScheduleRelationshipSkipped) {

				tt := p.ArrivalTime
				if "" == tt {
					tt = p.DepartureTime
				}
				testArr, err := time.Parse(time.RFC3339, tt)
				if nil == err && testArr.Before(testOff) && testArr.After(time.Now()) {

					if "" == p.DepartureTime {
						p.DepartureTime = p.ArrivalTime
					}
					testDep, err := time.Parse(time.RFC3339, p.DepartureTime)
					if nil != err {
						testDep = testArr
					}

					pn := p.Stop.Name
					if nil != p.Stop.PlatformName {
						pn += `.` + *p.Stop.PlatformName
					}

					pp := RGBPrediction{
						routeType:     p.Route.Description,
						stopName:      pn,
						arrivalTime:   testArr,
						departureTime: testDep,
						direction:     p.Route.DirectionNames[p.DirectionID],
						routeID:       m.fixRoute(p.Route.ID, p.Route.Description),
						stopID:        p.Stop.ID,
						changed:       0,
						countdown:     m.countdown(testArr),
						stack:         0,
						slice:         image.NewRGBA(image.Rect(0, 0, 1, 1)),
						canvas:        image.NewRGBA(image.Rect(0, 0, 1, 1)),
						color:         `#` + p.Route.Color,
					}
					idx := m.indexOf(pp)
					if -1 != idx {
						if m.prediction[idx].changed == -1 {
							m.prediction[idx].arrivalTime = pp.arrivalTime
							m.prediction[idx].departureTime = pp.departureTime
							m.prediction[idx].countdown = pp.countdown
							m.prediction[idx].changed = 1
						} else {
							m.prediction[idx].stack++
						}
					} else {
						m.prediction = append(m.prediction, pp)
					}
				} else {
					if nil != err {
						fmt.Println(err)
						fmt.Println(p)
					}
				}
			}
		}
		// update the graphic
		m.mux.Lock()
		for i, this := range m.prediction {
			if -1 != this.changed {

				m.prediction[i].changed = 1

				// init icon as needed
				if nil == m.prediction[i].icon.image {
					m.prediction[i].icon, _ = m.vehicleImage(this.routeType, this.color)
				}

				m.prediction[i].canvas = image.NewRGBA(image.Rect(0, 0, 128, 18))

				dst := imaging.Resize(m.prediction[i].icon.image, 18, 18, imaging.Lanczos)
				draw.Draw(m.prediction[i].canvas, m.prediction[i].canvas.Bounds(), dst, image.Pt(0, 1), draw.Over)

				mx := m.face.Metrics()
				yy := 2 + int(float64(mx.Ascent>>6)-float64(mx.Descent>>6))
				point := fixed.Point26_6{fixed.Int26_6(19 * 64), fixed.Int26_6(yy * 64)}

				d := &font.Drawer{
					Dst:  m.prediction[i].canvas,
					Src:  image.NewUniform(parseHexColor(this.color)),
					Face: m.face,
					Dot:  point,
				}
				others := ``
				if this.stack > 0 {
					others = fmt.Sprintf(" +%d", this.stack)
				}
				d.DrawString(fmt.Sprintf("%v %v %v%v", this.routeID, this.direction, this.countdown, others))
				point = fixed.Point26_6{fixed.Int26_6(19 * 64), fixed.Int26_6((yy + 7) * 64)}
				d.Dot = point
				d.Src = image.NewUniform(image.White)
				d.DrawString(fmt.Sprintf("%v", this.stopName))
			}
		}
		m.mux.Unlock()
	} else {
		fmt.Println(err)
	}

}

func (m *MBTA) fixRoute(route, desc string) string {
	if `Rapid Transit` == desc {
		return route + ` Line`
	}
	return route
}

func (m *MBTA) countdown(t time.Time) string {
	ret := nextEvent(time.Now(), t)[3:]
	if strings.Contains(ret, `m`) {
		ret = strings.Split(ret, `m`)[0]
		if `1` == ret {
			ret += ` min`
		} else {
			ret += ` mins`
		}
	} else {
		ret = `at stop`
	}

	return ret
}

// SetFace defines font face
func (m *MBTA) SetFace(f font.Face) {
	if m.face != f {
		m.face = f
		fmx := m.face.Metrics()
		m.fontHeight = float64((fmx.Height >> 6) + 2)
	}
}

// Predictions enumerate active predictions
func (m *MBTA) Predictions() <-chan *image.RGBA {
	ch := make(chan *image.RGBA)
	go func() {
		for _, this := range m.prediction {
			if 1 == this.changed {
				ch <- this.canvas
			}
		}
		close(ch)
	}()
	return ch
}

func (m *MBTA) measureString(s string) float64 {
	d := &font.Drawer{
		Face: m.face,
	}
	adv := d.MeasureString(s)
	return float64(adv >> 6)
}

func (m *MBTA) parseHexColor(x string) (r, g, b, a int) {
	x = strings.TrimPrefix(x, "#")
	a = 255
	if len(x) == 3 {
		format := "%1x%1x%1x"
		fmt.Sscanf(x, format, &r, &g, &b)
		r |= r << 4
		g |= g << 4
		b |= b << 4
	}
	if len(x) == 6 {
		format := "%02x%02x%02x"
		fmt.Sscanf(x, format, &r, &g, &b)
	}
	if len(x) == 8 {
		format := "%02x%02x%02x%02x"
		fmt.Sscanf(x, format, &r, &g, &b, &a)
	}
	return
}

func (m *MBTA) vehicleImage(routeType, color string) (ic iconCache, err error) {

	// dynamic SVG

	base := ``
	detail := ``
	switch routeType {
	case `Commuter Rail`:
		base = `m19.68781,22.41371l2.27468,-1.68129a2.90714,2.90714 0 0 0 1.02855,-1.6615l0,-9.53386a1.75825,1.75825 0 0 0 -0.59339,-1.30547a1.56895,1.56895 0 0 1 -0.61318,-1.18679l-0.01978,-2.35379a1.62153,1.62153 0 0 0 -1.28569,-1.56261a41.3755,41.3755 0 0 0 -4.94495,-1.02855a2.1073,2.1073 0 0 0 -0.92965,0c-1.38458,0.2967 -3.06587,0.5934 -4.43067,0.94943c-0.83075,0.23736 -1.68128,0.69229 -1.68128,1.68128l0,2.33402a1.58808,1.58808 0 0 1 -0.65274,1.20657a1.68326,1.68326 0 0 0 -0.61317,1.30547l0,9.4943a2.78838,2.78838 0 0 0 0.94943,1.6615l2.17578,1.60217l-3.44169,5.61746l2.23512,0l0.47471,-0.77141l10.93823,0l0.25714,0.43515l0.03956,0.05934l0.15824,0.27692l2.07688,0l-3.40213,-5.53834zm-0.96921,1.68128l-7.21962,0l0.81097,-1.34503l5.61746,0l0.05934,0.11868l0.69229,1.14723l0.03956,0.07912zm-8.66355,2.3538l0.98899,-1.62195l8.10972,0l0.96921,1.62195l-10.06792,0z`
		detail = `m19.687813,22.413707l2.274677,-1.681283a2.907136,2.907136 0 0 0 1.02855,-1.661503l0,-9.533864a1.758246,1.758246 0 0 0 -0.593394,-1.305467a1.568954,1.568954 0 0 1 -0.613174,-1.186788l-0.01978,-2.353796a1.621528,1.621528 0 0 0 -1.285687,-1.562604a41.375505,41.375505 0 0 0 -4.94495,-1.02855a2.1073,2.1073 0 0 0 -0.929651,0c-1.384586,0.296697 -3.065869,0.593394 -4.430675,0.94943c-0.830752,0.237358 -1.681283,0.692293 -1.681283,1.681283l0,2.334016a1.588081,1.588081 0 0 1 -0.652733,1.206568a1.683261,1.683261 0 0 0 -0.613174,1.305467l0,9.494304a2.788378,2.788378 0 0 0 0.94943,1.661503l2.175778,1.602164l-3.441685,5.617463l2.235117,0l0.474715,-0.771412l10.938229,0l0.257137,0.435156l0.03956,0.059339l0.158238,0.276917l2.076879,0l-3.402126,-5.538344zm1.879081,-4.549354a1.443925,1.443925 0 1 1 -1.443925,-1.443925a1.439317,1.439317 0 0 1 1.443925,1.443925zm-2.848291,6.230637l-7.219627,0l0.810972,-1.345026l5.617463,0l0.059339,0.118679l0.692293,1.147228l0.03956,0.079119zm-2.254897,-19.087507a0.484031,0.484031 0 0 1 0.593394,-0.474715l2.393356,0.494495a0.501438,0.501438 0 0 1 0.395596,0.474715l0,1.443925a0.493605,0.493605 0 0 1 -0.593394,0.474715l-2.393356,-0.474715a0.469928,0.469928 0 0 1 -0.395596,-0.474715l0,-1.463705zm-1.424146,4.470235a1.621944,1.621944 0 1 1 -1.621944,1.621944a1.629282,1.629282 0 0 1 1.621944,-1.621944zm-4.588914,-3.97574a0.501576,0.501576 0 0 1 0.395596,-0.474715l2.393356,-0.494495a0.491884,0.491884 0 0 1 0.593394,0.474715l0,1.463705a0.488225,0.488225 0 0 1 -0.395596,0.474715l-2.413136,0.474715a0.485673,0.485673 0 0 1 -0.573614,-0.474715l0,-1.443925zm-0.395596,13.806301a1.443925,1.443925 0 1 1 1.443925,-1.443925a1.439317,1.439317 0 0 1 -1.443925,1.443925zm0,7.140508l0.98899,-1.621944l8.109718,0l0.96921,1.621944l-10.067918,0z`
	case `Ferry`:
		base = `m14.99613,7.41969zm1.55595,15.96433a2.94082,2.94082 0 0 1 -3.11196,0a2.57514,2.57514 0 0 0 -2.67628,0.07779a2.90967,2.90967 0 0 1 -3.02637,-0.07779a2.54403,2.54403 0 0 0 -2.5907,0a2.78523,2.78523 0 0 1 -1.43928,0.44345l0,-2.33397a2.98742,2.98742 0 0 0 1.36925,-0.34231c1.8983,-1.12031 2.78521,0.22561 3.83549,0.21783l0,-5.44592l-1.60266,-3.92884a1.04251,1.04251 0 0 1 0.4977,-1.3878q0.04209,-0.01987 0.08583,-0.03593l0.98027,-0.42011l0,-3.42314l1.84382,0l0,-1.78938l2.64516,0l0,-2.3962l3.26755,0l0,2.3962l2.64516,0l0,1.78938l1.87495,0l0,3.39981l0.98027,0.42011a1.0425,1.0425 0 0 1 0.61942,1.33789q-0.01604,0.04369 -0.03593,0.08583l-1.61043,3.92884l0,5.44593c1.0425,0 1.89051,-1.36148 3.83548,-0.24118a2.96411,2.96411 0 0 0 1.36926,0.35009l0,2.33397a2.94082,2.94082 0 0 1 -1.43928,-0.44346a2.58292,2.58292 0 0 0 -2.5907,0a2.90967,2.90967 0 0 1 -3.02638,0.0778a2.58294,2.58294 0 0 0 -2.69964,-0.03889zm0,3.5943a3.21308,3.21308 0 0 1 -3.18976,0a2.37291,2.37291 0 0 0 -2.63738,0.08558a2.90968,2.90968 0 0 1 -3.02638,-0.0778a2.42733,2.42733 0 0 0 -2.57515,0.07004a2.54403,2.54403 0 0 1 -1.43149,0.38121l0,-2.4429a2.33399,2.33399 0 0 0 1.36926,-0.34232c0.98804,-0.64573 1.88273,-0.52125 3.11195,0.16338a3.00302,3.00302 0 0 0 2.65294,-0.14782c1.09697,-0.60683 1.69602,-0.45901 2.84744,0.08559a2.80075,2.80075 0 0 0 2.58292,0c1.15143,-0.5446 1.78159,-0.69242 2.87856,-0.08559a2.96416,2.96416 0 0 0 2.63739,0.14782c1.24477,-0.68462 2.14724,-0.77799 3.11195,-0.16338a2.20951,2.20951 0 0 0 1.36925,0.34232l0,2.44287a2.49729,2.49729 0 0 1 -1.49373,-0.37343a2.38843,2.38843 0 0 0 -2.54402,-0.07004a2.90968,2.90968 0 0 1 -3.02638,0.0778a2.41955,2.41955 0 0 0 -2.63737,-0.09333z`
		detail = `m12.109786,6.361621l0,1.766033l-1.87495,0l0,1.369261l4.761291,-2.077229l4.761291,2.077229l0,-1.369261l-1.88273,0l0,-1.766033l-5.764901,0zm4.442293,17.022395a2.940823,2.940823 0 0 1 -3.111954,0a2.575138,2.575138 0 0 0 -2.676281,0.077796a2.909668,2.909668 0 0 1 -3.026371,-0.077796a2.544031,2.544031 0 0 0 -2.590705,0a2.785225,2.785225 0 0 1 -1.439277,0.443453l0,-2.333971a2.987421,2.987421 0 0 0 1.369254,-0.34231c1.898298,-1.120307 2.785204,0.225613 3.835489,0.217833l0,-5.445918l-1.602662,-3.928846a1.042505,1.042505 0 0 1 0.4977,-1.387797q0.042091,-0.019867 0.085825,-0.035926l0.98027,-0.420113l0,-3.423143l1.843822,0l0,-1.789374l2.64516,0l0,-2.396206l3.267552,0l0,2.396206l2.64516,0l0,1.789374l1.87495,0l0,3.399809l0.98027,0.420113a1.042498,1.042498 0 0 1 0.619417,1.337891q-0.016039,0.043686 -0.035926,0.085825l-1.610435,3.928846l0,5.445925c1.042505,0 1.89051,-1.361481 3.835483,-0.241181a2.964108,2.964108 0 0 0 1.369261,0.350097l0,2.333964a2.940823,2.940823 0 0 1 -1.439284,-0.443453a2.582918,2.582918 0 0 0 -2.590698,0a2.909668,2.909668 0 0 1 -3.026378,0.077796a2.582939,2.582939 0 0 0 -2.699642,-0.038894zm0,3.594302a3.213076,3.213076 0 0 1 -3.189763,0a2.372907,2.372907 0 0 0 -2.63738,0.085583a2.909681,2.909681 0 0 1 -3.026378,-0.077796a2.427327,2.427327 0 0 0 -2.575145,0.070036a2.544031,2.544031 0 0 1 -1.431496,0.381211l0,-2.442901a2.333985,2.333985 0 0 0 1.369261,-0.342317c0.988043,-0.645733 1.88273,-0.521249 3.111954,0.163378a3.003017,3.003017 0 0 0 2.65294,-0.147818c1.096967,-0.606832 1.696018,-0.459014 2.847439,0.085583a2.800751,2.800751 0 0 0 2.582918,0c1.151428,-0.544597 1.781594,-0.692414 2.87856,-0.085583a2.964157,2.964157 0 0 0 2.637387,0.147818c1.244777,-0.684627 2.147245,-0.77799 3.111954,-0.163378a2.209514,2.209514 0 0 0 1.369254,0.342317l0,2.442866a2.497287,2.497287 0 0 1 -1.493732,-0.373431a2.388426,2.388426 0 0 0 -2.544024,-0.070036a2.909681,2.909681 0 0 1 -3.026378,0.077802a2.419553,2.419553 0 0 0 -2.637373,-0.093335z`
	case `Local Bus`:
		base = `m25.51754,13.80316l-1.02268,-7.67774c-0.26743,-1.38452 -1.17999,-1.93512 -2.533,-2.50151a23.16047,23.16047 0 0 0 -6.96974,-1.21146a23.14483,23.14483 0 0 0 -6.95398,1.21146c-1.33737,0.56639 -2.26555,1.11699 -2.54874,2.50151l-1.00694,7.67774l0,10.60407l1.8801,0l0,1.80933a1.31977,1.31977 0 0 0 0.69227,1.13275c0.09438,0.04724 0.18879,0.09438 0.26743,0.12588a1.60408,1.60408 0 0 0 0.22029,0.06286a1.34009,1.34009 0 0 0 0.36193,0.04724l0.53477,0a1.47969,1.47969 0 0 0 1.55752,-1.36878l0,-1.80933l10.15762,0l0,1.80933a1.31972,1.31972 0 0 0 0.69227,1.13275c0.09438,0.04724 0.18879,0.09438 0.26743,0.12588a1.60408,1.60408 0 0 0 0.22029,0.06286a1.34009,1.34009 0 0 0 0.36193,0.04724l0.53487,0a1.47967,1.47967 0 0 0 1.55751,-1.36878l0,-1.80932l1.72869,0l0.00016,-10.60397l0,-0.00001z`
		detail = `m25.517539,13.803165l-1.022677,-7.677747c-0.267432,-1.384514 -1.179988,-1.935117 -2.533003,-2.501504a23.160472,23.160472 0 0 0 -6.96974,-1.211465a23.144827,23.144827 0 0 0 -6.953978,1.211465c-1.33737,0.566387 -2.265548,1.116989 -2.548741,2.501504l-1.006939,7.677747l0,10.604064l1.880103,0l0,1.809328a1.319769,1.319769 0 0 0 0.692269,1.132751c0.094382,0.047238 0.188788,0.094382 0.267432,0.125882a1.60408,1.60408 0 0 0 0.220287,0.062859a1.340094,1.340094 0 0 0 0.361931,0.047238l0.534771,0a1.479688,1.479688 0 0 0 1.557518,-1.368776l0,-1.809328l10.157622,0l0,1.809328a1.319723,1.319723 0 0 0 0.692269,1.132751c0.094382,0.047238 0.188788,0.094382 0.267432,0.125882a1.60408,1.60408 0 0 0 0.220287,0.062859a1.340094,1.340094 0 0 0 0.361931,0.047238l0.534864,0a1.479665,1.479665 0 0 0 1.557518,-1.368776l0,-1.809328l1.728681,0l0.000163,-10.603971zm-15.465567,-9.17173l9.896057,0c0.471981,0 0.865295,0.537402 0.865295,1.18227s-0.393314,1.182247 -0.865295,1.182247l-9.896057,0c-0.471958,0 -0.865295,-0.537402 -0.865295,-1.182247s0.39336,-1.18227 0.865295,-1.18227zm-2.420298,10.603179l0.699835,-5.433571a0.731312,0.731312 0 0 1 0.750309,-0.62189l11.930864,0a0.74109,0.74109 0 0 1 0.750262,0.62189l0.800713,5.433571l0,0.242614a0.757969,0.757969 0 0 1 -0.750356,0.758481l-13.45914,0a0.77224,0.77224 0 0 1 -0.722488,-0.78877a0.543269,0.543269 0 0 1 0,-0.212325zm1.505135,6.41043a1.928947,1.928947 0 1 1 -0.08635,-3.851468a1.934837,1.934837 0 1 1 0.08635,3.851468zm11.676516,0a1.928947,1.928947 0 1 1 -0.08635,-3.851468a1.934837,1.934837 0 1 1 0.08635,3.851468z`
	case `Rapid Transit`:
		base = `m24.16124,19.52016l0,-12.91279a3.29001,3.14253 0 0 0 -3.29393,-3.12443l-11.73462,0a3.2704,3.12379 0 0 0 -3.27107,3.12443l0,12.89094a4.30041,4.10762 0 0 0 3.49981,4.04208l-3.52268,5.06899l2.3332,0l2.88218,-4.02023l7.91459,0l2.88218,4.02023l2.28745,0l-3.52267,-5.06899a4.29446,4.10194 0 0 0 3.54554,-4.02023l0.00002,0zm-11.66155,-17.11557l0,0c0,-0.56 0.51982,-1.01396 1.16107,-1.01396l0,0c0.30794,0 0.60325,0.10683 0.821,0.29698c0.21775,0.19015 0.34007,0.44805 0.34007,0.71698l0,0c0,0.56 -0.51982,1.01396 -1.16107,1.01396l0,0c-0.64123,0 -1.16107,-0.45396 -1.16107,-1.01396zm1.74159,0c0,-0.27999 -0.25991,-0.50697 -0.58053,-0.50697l0.58053,0.50697zm0.96206,0l0,0c0,-0.56 0.51982,-1.01396 1.16107,-1.01396l0,0c0.30794,0 0.60325,0.10683 0.821,0.29698c0.21775,0.19015 0.34007,0.44805 0.34007,0.71698l0,0c0,0.56 -0.51982,1.01396 -1.16107,1.01396l0,0c-0.64123,0 -1.16107,-0.45396 -1.16107,-1.01396zm1.74159,0c0,-0.28 -0.25991,-0.50697 -0.58053,-0.50697l0.58053,0.50697z`
		detail = `m24.16124,19.52016l0,-12.91279a3.29001,3.14253 0 0 0 -3.29393,-3.12443l-11.73462,0a3.2704,3.12379 0 0 0 -3.27107,3.12443l0,12.89094a4.30041,4.10762 0 0 0 3.49981,4.04208l-3.52268,5.06899l2.3332,0l2.88218,-4.02023l7.91459,0l2.88218,4.02023l2.28745,0l-3.52267,-5.06899a4.29446,4.10194 0 0 0 3.54554,-4.02023zm-11.46013,-15.14141l4.5749,0l0,1.83533l-4.5749,0l0,-1.83533zm-1.32673,18.13473a1.76134,1.68238 0 1 1 1.76134,-1.68238a1.76195,1.68297 0 0 1 -1.76134,1.68238zm7.20548,0a1.76134,1.68238 0 1 1 0,-3.36476a1.76134,1.68238 0 1 1 0,3.36476zm3.29393,-10.29091a1.19586,1.14225 0 0 1 -1.18948,1.13615l-11.34576,0a1.18126,1.12831 0 0 1 -1.18948,-1.13615l0,-4.28241a1.18138,1.12842 0 0 1 1.18948,-1.13615l11.34576,0a1.19597,1.14236 0 0 1 1.18948,1.13615l0,4.28241zm-9.3741,-9.81798l0,0c0,-0.56 0.51982,-1.01396 1.16107,-1.01396l0,0c0.30794,0 0.60325,0.10683 0.821,0.29698c0.21775,0.19015 0.34007,0.44805 0.34007,0.71698l0,0c0,0.56 -0.51982,1.01396 -1.16107,1.01396l0,0c-0.64123,0 -1.16107,-0.45396 -1.16107,-1.01396zm0.58053,0l0,0c0,0.28 0.25991,0.50697 0.58053,0.50697c0.32062,0 0.58053,-0.22698 0.58053,-0.50697c0,-0.28 -0.25991,-0.50697 -0.58053,-0.50697l0,0c-0.32062,0 -0.58053,0.22698 -0.58053,0.50697zm2.12312,0l0,0c0,-0.56 0.51982,-1.01396 1.16107,-1.01396l0,0c0.30794,0 0.60325,0.10683 0.821,0.29698c0.21775,0.19015 0.34007,0.44805 0.34007,0.71698l0,0c0,0.56 -0.51982,1.01396 -1.16107,1.01396l0,0c-0.64123,0 -1.16107,-0.45396 -1.16107,-1.01396zm0.58053,0l0,0c0,0.28 0.25991,0.50697 0.58053,0.50697c0.32062,0 0.58053,-0.22698 0.58053,-0.50697c0,-0.28 -0.25991,-0.50697 -0.58053,-0.50697l0,0c-0.32062,0 -0.58053,0.22698 -0.58053,0.50697z`
	case `The Ride`:
		base = `m26.24255,11.53927l-1.34457,0l-0.41309,-2.00065a1.61997,1.61997 0 0 0 -0.07289,-0.2673l-0.92339,-2.38135a1.23927,1.23927 0 0 0 0.2025,-0.68038l0,-2.42995a2.25985,2.25985 0 0 0 -2.25985,-2.26795l-12.85442,0a2.25985,2.25985 0 0 0 -2.25985,2.25985l0,2.42995a1.30407,1.30407 0 0 0 0.19439,0.68038l-0.91528,2.38135c0,0.0891 -0.0567,0.1782 -0.08099,0.26729l-0.4131,2.00066l-1.34457,0a0.74518,0.74518 0 0 0 -0.74518,0.74519l0,2.56764a0.74518,0.74518 0 0 0 0.74518,0.73708l0.51839,0l0,9.3796l1.76576,0l0,1.82246a1.54707,1.54707 0 1 0 3.07794,0l0,-1.82246l11.73664,0l0,1.82246a1.54707,1.54707 0 1 0 3.07794,0l0,-1.82246l1.79006,0l0,-9.3796l0.51839,0a0.74518,0.74518 0 0 0 0.74518,-0.73708l0,-2.59194a0.74518,0.74518 0 0 0 -0.74518,-0.71279l-0.00001,0z`
		detail = `m26.242555,11.539272l-1.344571,0l-0.413091,-2.000657a1.619965,1.619965 0 0 0 -0.072898,-0.267294l-0.92338,-2.381348a1.239273,1.239273 0 0 0 0.202496,-0.680385l0,-2.429947a2.259851,2.259851 0 0 0 -2.259851,-2.267951l-12.854421,0a2.259851,2.259851 0 0 0 -2.259851,2.259851l0,2.429947a1.304072,1.304072 0 0 0 0.194396,0.680385l-0.91528,2.381348c0,0.089098 -0.056699,0.178196 -0.080998,0.267294l-0.413091,2.000657l-1.344571,0a0.745184,0.745184 0 0 0 -0.745184,0.745184l0,2.567644a0.745184,0.745184 0 0 0 0.745184,0.737084l0.518389,0l0,9.379596l1.765762,0l0,1.82246a1.547066,1.547066 0 1 0 3.077933,0l0,-1.82246l11.736645,0l0,1.82246a1.547066,1.547066 0 1 0 3.077933,0l0,-1.82246l1.790061,0l0,-9.379596l0.518389,0a0.745184,0.745184 0 0 0 0.745184,-0.737084l0,-2.591944a0.745184,0.745184 0 0 0 -0.745184,-0.712785zm-18.629596,9.719789a1.482268,1.482268 0 1 1 1.474168,-1.482268a1.482268,1.482268 0 0 1 -1.474168,1.457968l0,0.024299zm-1.433669,-5.99387l0.809982,-4.487303c0.072898,-1.028678 0.421191,-1.239273 0.809982,-1.247373l14.360988,0c0.404991,0 0.753284,0.218695 0.809982,1.247373l0.809982,4.487303l-17.600918,0zm16.199648,5.99387a1.482268,1.482268 0 1 1 1.482268,-1.506567a1.482268,1.482268 0 0 1 -1.466068,1.482268l-0.0162,0.024299z`
	default:
		return ic, nil
	}

	ic.m.Lock()
	ic.last = routeType

	w, h := 30, 30

	ic.image = image.NewRGBA(image.Rect(0, 0, w, h))
	var iconMem = new(bytes.Buffer)

	var canvas = svg.New(iconMem)
	canvas.Start(w, h)

	canvas.Group()
	canvas.Path(base, `style="fill:navajowhite;fill-opacity:0.4;"`)
	canvas.Path(detail, fmt.Sprintf("style=\"fill:%s;\"", color))
	canvas.Gend()

	canvas.End()

	//fmt.Println(iconMem.String())
	iconI, err := oksvg.ReadIconStream(iconMem)
	if err != nil {
		ic.m.Unlock()
		return ic, err
	}

	gv := rasterx.NewScannerGV(w, h, ic.image, ic.image.Bounds())
	r := rasterx.NewDasher(w, h, gv)
	//iconI.SetTarget(0, 0, float64(w), float64(h))
	iconI.Draw(r, 1.0)

	ic.m.Unlock()

	return ic, nil

}
